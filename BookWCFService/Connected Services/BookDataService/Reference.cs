//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookWCFService.BookDataService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BookDataService.IBookDataService")]
    public interface IBookDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookDataService/GetAllBooks", ReplyAction="http://tempuri.org/IBookDataService/GetAllBooksResponse")]
        Models.Book[] GetAllBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookDataService/GetAllBooks", ReplyAction="http://tempuri.org/IBookDataService/GetAllBooksResponse")]
        System.Threading.Tasks.Task<Models.Book[]> GetAllBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookDataService/saveBook", ReplyAction="http://tempuri.org/IBookDataService/saveBookResponse")]
        Models.Result saveBook(Models.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookDataService/saveBook", ReplyAction="http://tempuri.org/IBookDataService/saveBookResponse")]
        System.Threading.Tasks.Task<Models.Result> saveBookAsync(Models.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookDataService/updateBook", ReplyAction="http://tempuri.org/IBookDataService/updateBookResponse")]
        Models.Result updateBook(Models.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookDataService/updateBook", ReplyAction="http://tempuri.org/IBookDataService/updateBookResponse")]
        System.Threading.Tasks.Task<Models.Result> updateBookAsync(Models.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookDataService/deleteBook", ReplyAction="http://tempuri.org/IBookDataService/deleteBookResponse")]
        Models.Result deleteBook(Models.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookDataService/deleteBook", ReplyAction="http://tempuri.org/IBookDataService/deleteBookResponse")]
        System.Threading.Tasks.Task<Models.Result> deleteBookAsync(Models.Book book);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBookDataServiceChannel : BookWCFService.BookDataService.IBookDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BookDataServiceClient : System.ServiceModel.ClientBase<BookWCFService.BookDataService.IBookDataService>, BookWCFService.BookDataService.IBookDataService {
        
        public BookDataServiceClient() {
        }
        
        public BookDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BookDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BookDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BookDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Models.Book[] GetAllBooks() {
            return base.Channel.GetAllBooks();
        }
        
        public System.Threading.Tasks.Task<Models.Book[]> GetAllBooksAsync() {
            return base.Channel.GetAllBooksAsync();
        }
        
        public Models.Result saveBook(Models.Book book) {
            return base.Channel.saveBook(book);
        }
        
        public System.Threading.Tasks.Task<Models.Result> saveBookAsync(Models.Book book) {
            return base.Channel.saveBookAsync(book);
        }
        
        public Models.Result updateBook(Models.Book book) {
            return base.Channel.updateBook(book);
        }
        
        public System.Threading.Tasks.Task<Models.Result> updateBookAsync(Models.Book book) {
            return base.Channel.updateBookAsync(book);
        }
        
        public Models.Result deleteBook(Models.Book book) {
            return base.Channel.deleteBook(book);
        }
        
        public System.Threading.Tasks.Task<Models.Result> deleteBookAsync(Models.Book book) {
            return base.Channel.deleteBookAsync(book);
        }
    }
}
